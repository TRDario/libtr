/**
 * @file color.cppm
 * @brief Provides color types.
 */

export module tr:color;

import std;
import :concepts;

export namespace tr {
	/******************************************************************************************************************
     * Concept denoting a valid color datatype.
	 *
	 * To fulfill this, a type must be an arithmetic type taking up up to 4 bytes.
     ******************************************************************************************************************/
	template <class T> concept ColorDatatype = (std::integral<T> || FloatingPoint<T>) && sizeof(T) <= 4;


	/******************************************************************************************************************
     * Single-channel red color.
	 *
	 * @tparam A valid color datatype.
     ******************************************************************************************************************/
	template <ColorDatatype T>
	struct R {
		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		T r;


		/**************************************************************************************************************
    	 * Equality comparison operator.
    	 **************************************************************************************************************/
		constexpr bool operator==(const R&) const noexcept = default;
	};

	/******************************************************************************************************************
     * Single-channel green color.
	 *
	 * @tparam A valid color datatype.
     ******************************************************************************************************************/
	template <ColorDatatype T>
	struct G {
		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		T g;


		/**************************************************************************************************************
    	 * Equality comparison operator.
    	 **************************************************************************************************************/
		constexpr bool operator==(const G&) const noexcept = default;
	};

	/******************************************************************************************************************
     * Single-channel blue color.
	 *
	 * @tparam A valid color datatype.
     ******************************************************************************************************************/
	template <ColorDatatype T>
	struct B {
		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		T b;


		/**************************************************************************************************************
    	 * Equality comparison operator.
    	 **************************************************************************************************************/
		constexpr bool operator==(const B&) const noexcept = default;
	};

	/******************************************************************************************************************
     * Two-channel RG color.
	 *
	 * @tparam A valid color datatype.
     ******************************************************************************************************************/
	template <ColorDatatype T>
	struct RG {
		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		T r;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		T g;


		/**************************************************************************************************************
    	 * Equality comparison operator.
    	 **************************************************************************************************************/
		constexpr bool operator==(const RG&) const noexcept = default;
	};

	/******************************************************************************************************************
     * Three-channel RGB color.
	 *
	 * @tparam A valid color datatype.
     ******************************************************************************************************************/
	template <ColorDatatype T>
	struct RGB {
		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		T r;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		T g;
		
		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		T b;


		/**************************************************************************************************************
    	 * Equality comparison operator.
    	 **************************************************************************************************************/
		constexpr bool operator==(const RGB&) const noexcept = default;
	};

	/******************************************************************************************************************
     * Shorthand for the common 8-bit RGB color.
     ******************************************************************************************************************/
	using RGB8 = RGB<std::uint8_t>;

	/******************************************************************************************************************
     * Three-channel BGR color.
	 *
	 * @tparam A valid color datatype.
     ******************************************************************************************************************/
	template <ColorDatatype T>
	struct BGR {
		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		T b;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		T g;

		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		T r;


		/**************************************************************************************************************
    	 * Equality comparison operator.
    	 **************************************************************************************************************/
		constexpr bool operator==(const BGR&) const noexcept = default;
	};

	/******************************************************************************************************************
     * Four-channel RGBA color.
	 *
	 * @tparam A valid color datatype.
     ******************************************************************************************************************/
	template <ColorDatatype T>
	struct RGBA {
		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		T r;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		T g;
		
		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		T b;

		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		T a;


		/**************************************************************************************************************
    	 * Default-constructs an RGBA value.
    	 **************************************************************************************************************/
		constexpr RGBA() noexcept = default;

		/**************************************************************************************************************
    	 * Initializes an RGBA value.
		 *
		 * @param r, g, b, a Channel values.
    	 **************************************************************************************************************/
		constexpr RGBA(T r, T g, T b, T a) noexcept;

		/**************************************************************************************************************
    	 * Initializes an RGBA value from an RGB value and an alpha channel.
		 *
		 * @param rgb The RGB values.
		 * @param a The alpha channel value.
    	 **************************************************************************************************************/
		constexpr RGBA(RGB<T> rgb, T a) noexcept;


		/**************************************************************************************************************
    	 * Equality comparison operator.
    	 **************************************************************************************************************/
		constexpr bool operator==(const RGBA&) const noexcept = default;
	};

	/******************************************************************************************************************
     * Shorthand for the common 8-bit RGBA color.
     ******************************************************************************************************************/
	using RGBA8 = RGBA<std::uint8_t>;

	/******************************************************************************************************************
     * Shorthand for the common floating-point RGBA color.
     ******************************************************************************************************************/
	using RGBAF = RGBA<float>;

	/******************************************************************************************************************
     * Four-channel BGRA color.
	 *
	 * @tparam A valid color datatype.
     ******************************************************************************************************************/
	template <ColorDatatype T>
	struct BGRA {
		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		T b;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		T g;

		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		T r;

		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		T a;


		/**************************************************************************************************************
    	 * Equality comparison operator.
    	 **************************************************************************************************************/
		constexpr bool operator==(const BGRA&) const noexcept = default;
	};

	/******************************************************************************************************************
     * Three-channel HSV color.
     ******************************************************************************************************************/
	struct HSV {
		/**************************************************************************************************************
    	 * The hue channel.
    	 **************************************************************************************************************/
		float h;
		
		/**************************************************************************************************************
    	 * The saturation channel.
    	 **************************************************************************************************************/
		float s;
		
		/**************************************************************************************************************
    	 * The value channel.
    	 **************************************************************************************************************/
		float v;
	};

	/******************************************************************************************************************
     * Special packed RGB color format.
     ******************************************************************************************************************/
	struct RGB_Ui8_2_3_3 {
		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint8_t r : 2;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint8_t g : 3;

		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint8_t b : 3;
	};

	/******************************************************************************************************************
     * Special packed RGB color format.
     ******************************************************************************************************************/
	struct RGB_Ui16_5_6_5 {
		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint16_t r : 5;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint16_t g : 6;

		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint16_t b : 5;
	};

	/******************************************************************************************************************
     * Special packed BGR color format.
     ******************************************************************************************************************/
	struct BGR_Ui8_3_3_2 {
		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint8_t b : 3;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint8_t g : 3;

		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint8_t r : 2;
	};

	/******************************************************************************************************************
     * Special packed BGR color format.
     ******************************************************************************************************************/
	struct BGR_Ui16_5_6_5 {
		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint16_t b : 5;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint16_t g : 6;

		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint16_t r : 5;
	};

	/******************************************************************************************************************
     * Special packed RGBA color format.
     ******************************************************************************************************************/
	struct RGBA_Ui16_4_4_4_4 {
		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint16_t r : 4;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint16_t g : 4;

		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint16_t b : 4;

		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		std::uint16_t a : 4;
	};

	/******************************************************************************************************************
     * Special packed RGBA color format.
     ******************************************************************************************************************/
	struct RGBA_Ui16_5_5_5_1 {
		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint16_t r : 5;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint16_t g : 5;

		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint16_t b : 5;

		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		std::uint16_t a : 1;
	};

	/******************************************************************************************************************
     * Special packed RGBA color format.
     ******************************************************************************************************************/
	struct RGBA_Ui32_10_10_10_2 {
		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint32_t r : 10;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint32_t g : 10;

		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint32_t b : 10;

		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		std::uint32_t a : 2;
	};

	/******************************************************************************************************************
     * Special packed ABGR color format.
     ******************************************************************************************************************/
	struct ABGR_Ui16_4_4_4_4 {
		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		std::uint16_t a : 4;

		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint16_t b : 4;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint16_t g : 4;

		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint16_t r : 4;
	};

	/******************************************************************************************************************
     * Special packed ABGR color format.
     ******************************************************************************************************************/
	struct ABGR_Ui16_1_5_5_5 {
		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		std::uint16_t a : 1;

		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint16_t b : 5;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint16_t g : 5;

		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint16_t r : 5;
	};

	/******************************************************************************************************************
     * Special packed ABGR color format.
     ******************************************************************************************************************/
	struct ABGR_Ui32_2_10_10_10 {
		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		std::uint32_t a : 2;

		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint32_t b : 10;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint32_t g : 10;

		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint32_t r : 10;
	};

	/******************************************************************************************************************
     * Special packed BGRA color format.
     ******************************************************************************************************************/
	struct BGRA_Ui16_4_4_4_4 {
		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint16_t b : 4;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint16_t g : 4;
		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint16_t r : 4;

		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		std::uint16_t a : 4;
	};

	/******************************************************************************************************************
     * Special packed BGRA color format.
     ******************************************************************************************************************/
	struct BGRA_Ui16_5_5_5_1 {
		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint16_t b : 5;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint16_t g : 5;

		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint16_t r : 5;

		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		std::uint16_t a : 1;
	};

	/******************************************************************************************************************
     * Special packed BGRA color format.
     ******************************************************************************************************************/
	struct BGRA_Ui32_10_10_10_2 {
		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint32_t b : 10;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint32_t g : 10;

		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint32_t r : 10;

		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		std::uint32_t a : 2;
	};

	/******************************************************************************************************************
     * Special packed ARGB color format.
     ******************************************************************************************************************/
	struct ARGB_Ui16_4_4_4_4 {
		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		std::uint16_t a : 4;

		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint16_t r : 4;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint16_t g : 4;

		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint16_t b : 4;
	};

	/******************************************************************************************************************
     * Special packed ARGB color format.
     ******************************************************************************************************************/
	struct ARGB_Ui16_1_5_5_5 {
		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		std::uint16_t a : 1;

		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint16_t r : 5;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint16_t g : 5;

		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint16_t b : 5;
	};

	/******************************************************************************************************************
     * Special packed ARGB color format.
     ******************************************************************************************************************/
	struct ARGB_Ui32_2_10_10_10 {
		/**************************************************************************************************************
    	 * The alpha channel.
    	 **************************************************************************************************************/
		std::uint32_t a : 2;

		/**************************************************************************************************************
    	 * The red channel.
    	 **************************************************************************************************************/
		std::uint32_t r : 10;

		/**************************************************************************************************************
    	 * The green channel.
    	 **************************************************************************************************************/
		std::uint32_t g : 10;

		/**************************************************************************************************************
    	 * The blue channel.
    	 **************************************************************************************************************/
		std::uint32_t b : 10;
	};


	/******************************************************************************************************************
     * Concept denoting a built-in color type (as opposed to custom castable color types).
     ******************************************************************************************************************/
	template <class T> concept BuiltinColor
		 = SpecializationOf<T, R>
		|| SpecializationOf<T, G>
		|| SpecializationOf<T, B>
		|| SpecializationOf<T, RG>
		|| SpecializationOf<T, RGB>
		|| SpecializationOf<T, BGR>
		|| SpecializationOf<T, RGBA>
		|| SpecializationOf<T, BGRA>
		|| std::same_as<T, RGB_Ui8_2_3_3>
		|| std::same_as<T, RGB_Ui16_5_6_5>
		|| std::same_as<T, BGR_Ui8_3_3_2>
		|| std::same_as<T, BGR_Ui16_5_6_5>
		|| std::same_as<T, RGBA_Ui16_4_4_4_4>
		|| std::same_as<T, RGBA_Ui16_5_5_5_1>
		|| std::same_as<T, RGBA_Ui32_10_10_10_2>
		|| std::same_as<T, ABGR_Ui16_4_4_4_4>
		|| std::same_as<T, ABGR_Ui16_1_5_5_5>
		|| std::same_as<T, ABGR_Ui32_2_10_10_10>
		|| std::same_as<T, BGRA_Ui16_4_4_4_4>
		|| std::same_as<T, BGRA_Ui16_5_5_5_1>
		|| std::same_as<T, BGRA_Ui32_10_10_10_2>
		|| std::same_as<T, ARGB_Ui16_4_4_4_4>
		|| std::same_as<T, ARGB_Ui16_1_5_5_5>
		|| std::same_as<T, ARGB_Ui32_2_10_10_10>;
}

/// @cond IMPLEMENTATION

template <tr::ColorDatatype T>
constexpr tr::RGBA<T>::RGBA(T r, T g, T b, T a) noexcept
	: r { r }, g { g }, b { b }, a { a }
{}

template <tr::ColorDatatype T>
constexpr tr::RGBA<T>::RGBA(RGB<T> rgb, T a) noexcept
	: r { rgb.r }, g { rgb.g }, b { rgb.b }, a { a }
{}

/// @endcond