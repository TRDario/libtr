/**
 * @file vertex_format.cppm
 * @brief Provides a vertex format class.
 */

module;
#include <GL/glew.h>

export module tr:vertex_format;

import std;
import :handle;

export namespace tr {
	/******************************************************************************************************************
	 * Single-precision float vertex attribute.
	 ******************************************************************************************************************/
	struct VertexAttributeF {
		/**************************************************************************************************************
	 	 * The source data's type.
	 	 **************************************************************************************************************/
		enum class Type {
			/**********************************************************************************************************
	 		 * C++ type: std::int8_t
	 		 **********************************************************************************************************/
			SI8 = GL_BYTE,

			/**********************************************************************************************************
	 		 * C++ type: std::uint8_t
	 		 **********************************************************************************************************/
			UI8 = GL_UNSIGNED_BYTE,

			/**********************************************************************************************************
	 		 * C++ type: std::int16_t
	 		 **********************************************************************************************************/
			SI16 = GL_SHORT,

			/**********************************************************************************************************
	 		 * C++ type: std::uint16_t
	 		 **********************************************************************************************************/
			UI16 = GL_UNSIGNED_SHORT,

			/**********************************************************************************************************
	 		 * C++ type: std::int32_t
	 		 **********************************************************************************************************/
			SI32 = GL_INT,

			/**********************************************************************************************************
	 		 * C++ type: std::uint32_t
	 		 **********************************************************************************************************/
			UI32 = GL_UNSIGNED_INT,

			/**********************************************************************************************************
	 		 * C++ type: Half
	 		 **********************************************************************************************************/
			FP16 = GL_HALF_FLOAT,

			/**********************************************************************************************************
	 		 * C++ type: float
	 		 **********************************************************************************************************/
			FP32 = GL_FLOAT,

			/**********************************************************************************************************
	 		 * C++ type: double
	 		 **********************************************************************************************************/
			FP64 = GL_DOUBLE,

			/**********************************************************************************************************
	 		 * 16.16 signed fixed point value. Size must be 4 to match.
	 		 **********************************************************************************************************/
			FIXED32 = GL_FIXED,
			
			/**********************************************************************************************************
	 		 * 4 packed signed integers (2, 10, 10, 10 bits). Size must be 4 to match.
	 		 **********************************************************************************************************/
			SI2_10_10_10 = GL_INT_2_10_10_10_REV,

			/**********************************************************************************************************
	 		 * 4 packed unsigned integers (2, 10, 10, 10 bits). Size must be 4 to match.
	 		 **********************************************************************************************************/
			UI2_10_10_10 = GL_UNSIGNED_INT_2_10_10_10_REV,

			/**********************************************************************************************************
	 		 * 3 packed floats (10, 11, 11 bits). Size must be 4 to match.
	 		 **********************************************************************************************************/
			FP10_11_11 = GL_UNSIGNED_INT_10F_11F_11F_REV
		};


		/**************************************************************************************************************
	 	 * The type being converted to a float.
	 	 **************************************************************************************************************/
		Type type;

		/**************************************************************************************************************
		 * The number of elements in the attribute (1 - 4).
		 **************************************************************************************************************/
		std::uint8_t elements;

		/**************************************************************************************************************
		 * Whether integer data is normalized when converted to floating point. Must be false for floats.
		 **************************************************************************************************************/
		bool normalized;

		/**************************************************************************************************************
		 * The relative position of the attribute within a vertex in bytes.
		 **************************************************************************************************************/
		std::uint32_t offset;
	};

	/******************************************************************************************************************
	 * Double-precision float vertex attribute.
	 ******************************************************************************************************************/
	struct VertexAttributeD {
		/**************************************************************************************************************
		 * The number of elements in the attribute (1 - 4).
		 **************************************************************************************************************/
		std::uint8_t elements;

		/**************************************************************************************************************
		 * The relative position of the attribute within a vertex in bytes.
		 **************************************************************************************************************/
		std::uint32_t offset;
	};

	/******************************************************************************************************************
	 * Integer vertex attribute.
	 ******************************************************************************************************************/
	struct VertexAttributeI {
		/**************************************************************************************************************
	 	 * The source data's type.
	 	 **************************************************************************************************************/
		enum class Type {
			/**********************************************************************************************************
	 		 * C++ type: std::int8_t
	 		 **********************************************************************************************************/
			SI8 = GL_BYTE,

			/**********************************************************************************************************
	 		 * C++ type: std::uint8_t
	 		 **********************************************************************************************************/
			UI8 = GL_UNSIGNED_BYTE,

			/**********************************************************************************************************
	 		 * C++ type: std::int16_t
	 		 **********************************************************************************************************/
			SI16 = GL_SHORT,

			/**********************************************************************************************************
	 		 * C++ type: std::uint16_t
	 		 **********************************************************************************************************/
			UI16 = GL_UNSIGNED_SHORT,

			/**********************************************************************************************************
	 		 * C++ type: std::int32_t
	 		 **********************************************************************************************************/
			SI32 = GL_INT,

			/**********************************************************************************************************
	 		 * C++ type: std::uint32_t
	 		 **********************************************************************************************************/
			UI32 = GL_UNSIGNED_INT,

			/**********************************************************************************************************
	 		 * 4 packed signed integers (2, 10, 10, 10 bits). Size must be 4 to match.
	 		 **********************************************************************************************************/
			SI2_10_10_10 = GL_INT_2_10_10_10_REV,

			/**********************************************************************************************************
	 		 * 4 packed unsigned integers (2, 10, 10, 10 bits). Size must be 4 to match.
	 		 **********************************************************************************************************/
			UI2_10_10_10 = GL_UNSIGNED_INT_2_10_10_10_REV
		};


		/**************************************************************************************************************
	 	 * The type being converted to an intger.
	 	 **************************************************************************************************************/
		Type type;

		/**************************************************************************************************************
		 * The number of elements in the attribute (1 - 4).
		 **************************************************************************************************************/
		std::uint8_t elements;

		/**************************************************************************************************************
		 * The relative position of the attribute within a vertex in bytes.
		 **************************************************************************************************************/
		std::uint32_t offset;
	};

	/******************************************************************************************************************
	 * Union of vertex attribute types.
	 ******************************************************************************************************************/
	using VertexAttribute = std::variant<VertexAttributeF, VertexAttributeD, VertexAttributeI>;


	/******************************************************************************************************************
	 * GPU Vertex format.
	 ******************************************************************************************************************/
	class VertexFormat {
	public:
        /**************************************************************************************************************
		 * Creates a new vertex format.
		 *
		 * @param attrs A list of vertex attributes.
		 **************************************************************************************************************/
        VertexFormat(std::span<const VertexAttribute> attrs) noexcept;


		/**************************************************************************************************************
		 * Equality comparison operator.
		 **************************************************************************************************************/
		bool operator==(const VertexFormat&) const noexcept = default;


        /**************************************************************************************************************
	     * Sets the debug label of the vertex format.
         *
         * @param label The new label of the format.
	     **************************************************************************************************************/
        void setLabel(std::string_view label) noexcept;
	private:
		struct Deleter { void operator()(GLuint id) noexcept; /**< @private */ };
		Handle<GLuint, 0, Deleter> _id;

		// Binds the vertex format.
		void bind() const noexcept;

		friend class GLContext;
	};
}

// IMPLEMENTATION

tr::VertexFormat::VertexFormat(std::span<const VertexAttribute> attrs) noexcept
{
    struct AttribFormatter {
        GLuint vao;
        int    i;

        void operator()(const VertexAttributeF& attr) {
            glVertexArrayAttribFormat(vao, i, attr.elements, GLenum(attr.type), attr.normalized, attr.offset);
        }
        void operator()(const VertexAttributeD& attr) {
            glVertexArrayAttribLFormat(vao, i, attr.elements, GL_DOUBLE, attr.offset);
        }
        void operator()(const VertexAttributeI& attr) {
            glVertexArrayAttribIFormat(vao, i, attr.elements, GLenum(attr.type), attr.offset);
        }
    };

    GLuint vao;
    glCreateVertexArrays(1, &vao);
    for (int i = 0; i < attrs.size(); ++i) {
        std::visit(AttribFormatter { vao, i }, attrs[i]);
        glVertexArrayAttribBinding(vao, i, 0);
        glEnableVertexArrayAttrib(vao, i);
    }
    _id.reset(vao);
}

void tr::VertexFormat::Deleter::operator()(GLuint id) noexcept
{
    glDeleteVertexArrays(1, &id);
}

void tr::VertexFormat::setLabel(std::string_view label) noexcept
{
    glObjectLabel(GL_VERTEX_ARRAY, _id.get(), label.size(), label.data());
}

void tr::VertexFormat::bind() const noexcept
{
    glBindVertexArray(_id.get());
}