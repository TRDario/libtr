#pragma once
#include "handle.hpp"
#include <cstdint>
#include <span>
#include <string_view>
#include <variant>

namespace tr {
	/** @ingroup graphics
	 *  @defgroup vertex_format Vertex Format
	 *  Vertex format class and related functionality.
	 *  @{
	 */

	/******************************************************************************************************************
	 * Single-precision float vertex attribute.
	 ******************************************************************************************************************/
	struct VertexAttributeF {
		/**************************************************************************************************************
		 * The source data's type.
		 **************************************************************************************************************/
		enum class Type {
			/**********************************************************************************************************
			 * C++ type: std::int8_t
			 **********************************************************************************************************/
			SI8 = 0x14'00,

			/**********************************************************************************************************
			 * C++ type: std::uint8_t
			 **********************************************************************************************************/
			UI8,

			/**********************************************************************************************************
			 * C++ type: std::int16_t
			 **********************************************************************************************************/
			SI16,

			/**********************************************************************************************************
			 * C++ type: std::uint16_t
			 **********************************************************************************************************/
			UI16,

			/**********************************************************************************************************
			 * C++ type: std::int32_t
			 **********************************************************************************************************/
			SI32,

			/**********************************************************************************************************
			 * C++ type: std::uint32_t
			 **********************************************************************************************************/
			UI32,

			/**********************************************************************************************************
			 * C++ type: Half
			 **********************************************************************************************************/
			FP16 = 0x14'0B,

			/**********************************************************************************************************
			 * C++ type: float
			 **********************************************************************************************************/
			FP32 = 0x14'06,

			/**********************************************************************************************************
			 * C++ type: double
			 **********************************************************************************************************/
			FP64 = 0x14'0A,

			/**********************************************************************************************************
			 * 16.16 signed fixed point value. Size must be 4 to match.
			 **********************************************************************************************************/
			FIXED32 = 0x14'0C,

			/**********************************************************************************************************
			 * 4 packed signed integers (2, 10, 10, 10 bits). Size must be 4 to match.
			 **********************************************************************************************************/
			SI2_10_10_10 = 0x8D'9F,

			/**********************************************************************************************************
			 * 4 packed unsigned integers (2, 10, 10, 10 bits). Size must be 4 to match.
			 **********************************************************************************************************/
			UI2_10_10_10 = 0x83'68,

			/**********************************************************************************************************
			 * 3 packed floats (10, 11, 11 bits). Size must be 4 to match.
			 **********************************************************************************************************/
			FP10_11_11 = 0x8C'3B
		};

		/**************************************************************************************************************
		 * The type being converted to a float.
		 **************************************************************************************************************/
		Type type;

		/**************************************************************************************************************
		 * The number of elements in the attribute (1 - 4).
		 **************************************************************************************************************/
		std::uint8_t elements;

		/**************************************************************************************************************
		 * Whether integer data is normalized when converted to floating point. Must be false for floats.
		 **************************************************************************************************************/
		bool normalized;

		/**************************************************************************************************************
		 * The relative position of the attribute within a vertex in bytes.
		 **************************************************************************************************************/
		std::uint32_t offset;
	};

	/******************************************************************************************************************
	 * Double-precision float vertex attribute.
	 ******************************************************************************************************************/
	struct VertexAttributeD {
		/**************************************************************************************************************
		 * The number of elements in the attribute (1 - 4).
		 **************************************************************************************************************/
		std::uint8_t elements;

		/**************************************************************************************************************
		 * The relative position of the attribute within a vertex in bytes.
		 **************************************************************************************************************/
		std::uint32_t offset;
	};

	/******************************************************************************************************************
	 * Integer vertex attribute.
	 ******************************************************************************************************************/
	struct VertexAttributeI {
		/**************************************************************************************************************
		 * The source data's type.
		 **************************************************************************************************************/
		enum class Type {
			/**********************************************************************************************************
			 * C++ type: std::int8_t
			 **********************************************************************************************************/
			SI8 = 0x14'00,

			/**********************************************************************************************************
			 * C++ type: std::uint8_t
			 **********************************************************************************************************/
			UI8,

			/**********************************************************************************************************
			 * C++ type: std::int16_t
			 **********************************************************************************************************/
			SI16,

			/**********************************************************************************************************
			 * C++ type: std::uint16_t
			 **********************************************************************************************************/
			UI16,

			/**********************************************************************************************************
			 * C++ type: std::int32_t
			 **********************************************************************************************************/
			SI32,

			/**********************************************************************************************************
			 * C++ type: std::uint32_t
			 **********************************************************************************************************/
			UI32,

			/**********************************************************************************************************
			 * 4 packed signed integers (2, 10, 10, 10 bits). Size must be 4 to match.
			 **********************************************************************************************************/
			SI2_10_10_10 = 0x8D'9F,

			/**********************************************************************************************************
			 * 4 packed unsigned integers (2, 10, 10, 10 bits). Size must be 4 to match.
			 **********************************************************************************************************/
			UI2_10_10_10 = 0x83'68
		};

		/**************************************************************************************************************
		 * The type being converted to an intger.
		 **************************************************************************************************************/
		Type type;

		/**************************************************************************************************************
		 * The number of elements in the attribute (1 - 4).
		 **************************************************************************************************************/
		std::uint8_t elements;

		/**************************************************************************************************************
		 * The relative position of the attribute within a vertex in bytes.
		 **************************************************************************************************************/
		std::uint32_t offset;
	};

	/******************************************************************************************************************
	 * Union of vertex attribute types.
	 ******************************************************************************************************************/
	using VertexAttribute = std::variant<VertexAttributeF, VertexAttributeD, VertexAttributeI>;

	/******************************************************************************************************************
	 * GPU Vertex format.
	 ******************************************************************************************************************/
	class VertexFormat {
	  public:
		/**************************************************************************************************************
		 * Creates a new vertex format.
		 *
		 * @param[in] attrs A list of vertex attributes.
		 **************************************************************************************************************/
		VertexFormat(std::span<const VertexAttribute> attrs) noexcept;

		friend bool operator==(const VertexFormat&, const VertexFormat&) noexcept = default;

		/**************************************************************************************************************
		 * Sets the debug label of the vertex format.
		 *
		 * @param[in] label The new label of the format.
		 **************************************************************************************************************/
		void setLabel(std::string_view label) noexcept;

	  private:
		struct Deleter {
			void operator()(unsigned int id) const noexcept;
		};

		Handle<unsigned int, 0, Deleter> _id;

		// Binds the vertex format.
		void bind() const noexcept;

		friend class GraphicsContext;
	};

	/// @}
} // namespace tr
