/**
 * @file event.hpp
 * @brief Provides event functionality.
 */

#pragma once
#include <any>
#define BOOST_STATIC_STRING_STANDALONE
#include "chrono.hpp"
#include "keyboard.hpp"
#include "mouse.hpp"
#include "window.hpp"

#include <boost/static_string.hpp>

namespace tr {
	/******************************************************************************************************************
	 * Generates a new valid event type ID.
     *
     * @return A unique, unused event type ID.
	 ******************************************************************************************************************/
	std::uint32_t generateEventType() noexcept;

	/******************************************************************************************************************
	 * Namespace containing event type IDs.
	 ******************************************************************************************************************/
	namespace EventType {
		/**************************************************************************************************************
	     * ID for KeyDownEvent.
	     **************************************************************************************************************/
		inline constexpr std::uint32_t KEY_DOWN {0x3'00};

		/**************************************************************************************************************
	     * ID for KeyUpEvent.
	     **************************************************************************************************************/
		inline constexpr std::uint32_t KEY_UP {0x3'01};

		/**************************************************************************************************************
	     * ID for TextEditEvent.
	     **************************************************************************************************************/
		inline constexpr std::uint32_t TEXT_EDIT {0x3'02};

		/**************************************************************************************************************
	     * ID for TextInputEvent.
	     **************************************************************************************************************/
		inline constexpr std::uint32_t TEXT_INPUT {0x3'03};

		/**************************************************************************************************************
	     * ID for a keymap change event (no associated type).
	     **************************************************************************************************************/
		inline constexpr std::uint32_t KEYMAP_CHANGE {0x3'04};

		/**************************************************************************************************************
	     * ID for a clipboard update event (no associated type).
	     **************************************************************************************************************/
		inline constexpr std::uint32_t CLIPBOARD_UPDATE {0x9'00};

		/**************************************************************************************************************
	     * ID for MouseMotionEvent.
	     **************************************************************************************************************/
		inline constexpr std::uint32_t MOUSE_MOTION {0x4'00};

		/**************************************************************************************************************
	     * ID for MouseDownEvent.
	     **************************************************************************************************************/
		inline constexpr std::uint32_t MOUSE_DOWN {0x4'01};

		/**************************************************************************************************************
	     * ID for MouseUpEvent.
	     **************************************************************************************************************/
		inline constexpr std::uint32_t MOUSE_UP {0x4'02};

		/**************************************************************************************************************
	     * ID for MouseWheelEvent.
	     **************************************************************************************************************/
		inline constexpr std::uint32_t MOUSE_WHEEL {0x4'03};

		/**************************************************************************************************************
	     * ID for a quit event (no associated type).
	     **************************************************************************************************************/
		inline constexpr std::uint32_t QUIT {0x1'00};

		/**************************************************************************************************************
	     * ID for WindowEvent.
	     **************************************************************************************************************/
		inline constexpr std::uint32_t WINDOW {0x2'00};

		/**************************************************************************************************************
	     * ID for TickEvent.
	     **************************************************************************************************************/
		inline const std::uint32_t     TICK {generateEventType()};

		/**************************************************************************************************************
	     * ID for a draw event (no associated type).
	     **************************************************************************************************************/
		inline const std::uint32_t     DRAW {generateEventType()};
	} // namespace EventType

	/******************************************************************************************************************
	 * Event emitted when a key is pressed.
	 ******************************************************************************************************************/
	struct KeyDownEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;

		/**************************************************************************************************************
	     * Whether the event is a repeat.
	     **************************************************************************************************************/
		bool       repeat;

		/**************************************************************************************************************
	     * Information about the pressed key.
	     **************************************************************************************************************/
		KeyInfo    key;
	};

	/******************************************************************************************************************
	 * Event emitted when a key is released.
	 ******************************************************************************************************************/
	struct KeyUpEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;

		/**************************************************************************************************************
	     * Information about the released key.
	     **************************************************************************************************************/
		KeyInfo    key;
	};

	/******************************************************************************************************************
	 * Event emitted when text is edited.
	 ******************************************************************************************************************/
	struct TextEditEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView               win;

		/**************************************************************************************************************
	     * The edited text string.
	     **************************************************************************************************************/
		boost::static_string<31> text;

		/**************************************************************************************************************
	     * The selected substring.
	     **************************************************************************************************************/
		std::string_view         selected;
	};

	/******************************************************************************************************************
	 * Event emitted when text is inputted.
	 ******************************************************************************************************************/
	struct TextInputEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView               win;

		/**************************************************************************************************************
	     * The inputted text string.
	     **************************************************************************************************************/
		boost::static_string<31> text;
	};

	/******************************************************************************************************************
	 * Event emitted when the mouse is moved.
	 ******************************************************************************************************************/
	struct MouseMotionEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView      win;

		/**************************************************************************************************************
	     * A mask of the held mouse buttons.
	     **************************************************************************************************************/
		MouseButtonMask buttons;

		/**************************************************************************************************************
	     * The position of the mouse.
	     **************************************************************************************************************/
		glm::ivec2      pos;

		/**************************************************************************************************************
	     * The change in mouse position since the last event of this type.
	     **************************************************************************************************************/
		glm::ivec2      delta;
	};

	/******************************************************************************************************************
	 * Event emitted when a mouse button is pressed.
	 ******************************************************************************************************************/
	struct MouseDownEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView   win;

		/**************************************************************************************************************
	     * The pressed mouse button.
	     **************************************************************************************************************/
		MouseButton  button;

		/**************************************************************************************************************
	     * The number of consecutive clicks.
	     **************************************************************************************************************/
		std::uint8_t clicks;

		/**************************************************************************************************************
	     * The position of the mouse.
	     **************************************************************************************************************/
		glm::ivec2   pos;
	};

	/******************************************************************************************************************
	 * Event emitted when a mouse button is released.
	 ******************************************************************************************************************/
	struct MouseUpEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView  win;

		/**************************************************************************************************************
	     * The released mouse button.
	     **************************************************************************************************************/
		MouseButton button;

		/**************************************************************************************************************
	     * The position of the mouse.
	     **************************************************************************************************************/
		glm::ivec2  pos;
	};

	/******************************************************************************************************************
	 * Event emitted when the mouse wheel is moved.
	 ******************************************************************************************************************/
	struct MouseWheelEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;

		/**************************************************************************************************************
	     * The change in wheel value.
	     **************************************************************************************************************/
		glm::vec2  delta;

		/**************************************************************************************************************
	     * The position of the mouse.
	     **************************************************************************************************************/
		glm::ivec2 mousePos;
	};

	/******************************************************************************************************************
	 * Event emitted when the mouse enters a window.
	 ******************************************************************************************************************/
	struct WindowEnterEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Event emitted when the mouse leaves a window.
	 ******************************************************************************************************************/
	struct WindowLeaveEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Event emitted when a window is shown.
	 ******************************************************************************************************************/
	struct WindowShowEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Event emitted when a window is hidden.
	 ******************************************************************************************************************/
	struct WindowHideEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Event emitted when a window is exposed.
	 ******************************************************************************************************************/
	struct WindowExposeEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Event emitted when a window is moved.
	 ******************************************************************************************************************/
	struct WindowMotionEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;

		/**************************************************************************************************************
	     * The new position of the top-left corner of the window.
	     **************************************************************************************************************/
		glm::ivec2 pos;
	};

	/******************************************************************************************************************
	 * Event emitted when a window is resized.
	 ******************************************************************************************************************/
	struct WindowResizeEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;

		/**************************************************************************************************************
	     * The new size of the window.
	     **************************************************************************************************************/
		glm::ivec2 size;
	};

	/******************************************************************************************************************
	 * Event emitted when a window's size changes.
	 ******************************************************************************************************************/
	struct WindowSizeChangeEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Event emitted when a window is minimized.
	 ******************************************************************************************************************/
	struct WindowMinimizeEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Event emitted when a window is maximized.
	 ******************************************************************************************************************/
	struct WindowMaximizeEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Event emitted when a window is restored.
	 ******************************************************************************************************************/
	struct WindowRestoreEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Event emitted when a window gains focus.
	 ******************************************************************************************************************/
	struct WindowGainFocusEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Event emitted when a window loses focus.
	 ******************************************************************************************************************/
	struct WindowLoseFocusEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Event emitted when a window close request is made.
	 ******************************************************************************************************************/
	struct WindowCloseEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Event emitted when a window hit-test occurs.
	 ******************************************************************************************************************/
	struct HitTestEvent {
		/**************************************************************************************************************
	     * The window the event occured for.
	     **************************************************************************************************************/
		WindowView win;
	};

	/******************************************************************************************************************
	 * Union of window event types.
	 ******************************************************************************************************************/
	using WindowEvent = std::variant<
		WindowEnterEvent,
		WindowLeaveEvent,
		WindowShowEvent,
		WindowHideEvent,
		WindowExposeEvent,
		WindowMotionEvent,
		WindowResizeEvent,
		WindowSizeChangeEvent,
		WindowMinimizeEvent,
		WindowMaximizeEvent,
		WindowRestoreEvent,
		WindowGainFocusEvent,
		WindowLoseFocusEvent,
		WindowCloseEvent,
		HitTestEvent>;

	/******************************************************************************************************************
	 * Event emitted when a user-defined tick occurs.
	 ******************************************************************************************************************/
	struct TickEvent {
		/**************************************************************************************************************
	     * The ticker ID.
	     **************************************************************************************************************/
		std::uint32_t id;
	};

	/******************************************************************************************************************
	 * Intermediate interface between custom event types and Event.
	 ******************************************************************************************************************/
	struct CustomEventBase {
		/**************************************************************************************************************
	     * The type of the event.
	     **************************************************************************************************************/
		std::uint32_t type;

		/**************************************************************************************************************
	     * An unsigned integer value.
	     **************************************************************************************************************/
		std::uint32_t uint;

		/**************************************************************************************************************
	     * A signed integer value.
	     **************************************************************************************************************/
		std::int32_t  sint;

		/**************************************************************************************************************
	     * A generic value.
	     **************************************************************************************************************/
		std::any      any1;

		/**************************************************************************************************************
	     * A generic value.
	     **************************************************************************************************************/
		std::any      any2;
	};

	/******************************************************************************************************************
	 * Concept denoting a custom event.
     *
     * To fulfill this concept, a type must be constructible from CustomEventBase and convertible to it.
	 ******************************************************************************************************************/
	template <class T>
	concept CustomEventType = std::constructible_from<T, CustomEventBase> && std::is_convertible_v<T, CustomEventBase>;

	/******************************************************************************************************************
	 * Unified event type.
	 ******************************************************************************************************************/
	class Event {
	public:
		/**************************************************************************************************************
	     * Constructs an event from a custom event base.
         *
         * @exception std::bad_alloc If allocating generic values failed.
         *
         * @param custom The custom event base to convert into a generic event.
	     **************************************************************************************************************/
		Event(const CustomEventBase& custom);

		/**************************************************************************************************************
	     * Gets the type ID of the event.
         *
         * @return The type ID of the event.
	     **************************************************************************************************************/
		std::uint32_t type() const noexcept;

		/**************************************************************************************************************
	     * Converts the event into a key down event.
         *
         * The type must match, otherwise a failed assertion may be triggered.
	     **************************************************************************************************************/
		operator KeyDownEvent() const noexcept;

		/**************************************************************************************************************
	     * Converts the event into a key up event.
         *
         * The type must match, otherwise a failed assertion may be triggered.
	     **************************************************************************************************************/
		operator KeyUpEvent() const noexcept;

		/**************************************************************************************************************
	     * Converts the event into a text editing event.
         *
         * The type must match, otherwise a failed assertion may be triggered.
	     **************************************************************************************************************/
		operator TextEditEvent() const noexcept;

		/**************************************************************************************************************
	     * Converts the event into a text input event.
         *
         * The type must match, otherwise a failed assertion may be triggered.
	     **************************************************************************************************************/
		operator TextInputEvent() const noexcept;

		/**************************************************************************************************************
	     * Converts the event into a mouse motion event.
         *
         * The type must match, otherwise a failed assertion may be triggered.
	     **************************************************************************************************************/
		operator MouseMotionEvent() const noexcept;

		/**************************************************************************************************************
	     * Converts the event into a mouse button down event.
         *
         * The type must match, otherwise a failed assertion may be triggered.
	     **************************************************************************************************************/
		operator MouseDownEvent() const noexcept;

		/**************************************************************************************************************
	     * Converts the event into a mouse buttom up event.
         *
         * The type must match, otherwise a failed assertion may be triggered.
	     **************************************************************************************************************/
		operator MouseUpEvent() const noexcept;

		/**************************************************************************************************************
	     * Converts the event into a mouse wheel event.
         *
         * The type must match, otherwise a failed assertion may be triggered.
	     **************************************************************************************************************/
		operator MouseWheelEvent() const noexcept;

		/**************************************************************************************************************
	     * Converts the event into a window event.
         *
         * The type must match, otherwise a failed assertion may be triggered.
	     **************************************************************************************************************/
		operator WindowEvent() const noexcept;

		/**************************************************************************************************************
	     * Converts the event into a tick event.
         *
         * The type must match, otherwise a failed assertion may be triggered.
	     **************************************************************************************************************/
		operator TickEvent() const noexcept;

		/**************************************************************************************************************
	     * Converts the event into a key down event.
         *
         * The type must match, otherwise a failed assertion may be triggered.
	     **************************************************************************************************************/
		template <std::constructible_from<CustomEventBase> T>
		operator T() const noexcept;

	private:
		alignas(8) std::byte _impl[56];

		Event() noexcept = default;

		CustomEventBase getCustomEventBase() const noexcept;

		friend class EventQueue;
	};

	/******************************************************************************************************************
	 * Opaque ticker handle.
	 ******************************************************************************************************************/
	enum class Ticker : int {
	};

	/******************************************************************************************************************
	 * Sentinel value that signals that a ticker should tick forever.
	 ******************************************************************************************************************/
	[[maybe_unused]] inline constexpr std::uint32_t TICK_FOREVER {0};

	/******************************************************************************************************************
	 * Sentinel value that signals that no draw events should be emitted.
	 ******************************************************************************************************************/
	[[maybe_unused]] inline constexpr std::uint32_t NO_DRAW_EVENTS {0};

	/******************************************************************************************************************
	 * Global event queue.
     *
     * This class cannot be instantiated before the SDL library is initialized.
	 ******************************************************************************************************************/
	class EventQueue {
	public:
		/**************************************************************************************************************
	     * Constructs an event queue.
	     **************************************************************************************************************/
		EventQueue() noexcept         = default;

		EventQueue(const EventQueue&) = delete;

		/**************************************************************************************************************
	     * Move constructs an event queue.
	     **************************************************************************************************************/
		EventQueue(EventQueue&&)      = default;

		/**************************************************************************************************************
	     * Destroys an event queue.
	     **************************************************************************************************************/
		~EventQueue() noexcept;

		void                 operator=(const EventQueue&) = delete;

		/**************************************************************************************************************
	     * Move assignment operator.
	     **************************************************************************************************************/
		EventQueue&          operator=(EventQueue&&)      = default;

		/**************************************************************************************************************
	     * Polls for an event, returning it from the event queue if it exists.
         *
         * @return The polled event, if one was found.
	     **************************************************************************************************************/
		std::optional<Event> pollEvent() noexcept;

		/**************************************************************************************************************
	     * Gets an event from the event queue, or waits until one appears.
         *
         * @return The polled event.
	     **************************************************************************************************************/
		Event                waitForEvent() noexcept;

		/**************************************************************************************************************
	     * Gets an event from the event queue, waiting until one appears or until a certain amount of time has passed.
         *
         * @param timeout The maximum amount of time to wait before returning.
         *
         * @return The polled event, if one was found.
	     **************************************************************************************************************/
		std::optional<Event> waitForEventTimeout(std::chrono::milliseconds timeout) noexcept;

		/**************************************************************************************************************
	     * Adds a ticker that generates tick events at a regular interval.
         *
         * @exception std::bad_alloc If an internal allocation fails.
         * @exception SDLError If creating the draw ticker fails.
         *
         * @param id The ticker ID.
         * @param interval The interval between ticks.
         * @param nticks The number of ticks to generate, or TICK_FOREVER to tick forever.
         *
         * @return A ticker handle that can be used to halt the ticker.
	     **************************************************************************************************************/
		Ticker               addTicker(std::int32_t id, MillisecondsD interval, std::uint32_t nticks);

		/**************************************************************************************************************
	     * Halts a ticker.
         *
         * @param ticker A ticker handle.
	     **************************************************************************************************************/
		void                 removeTicker(Ticker ticker) noexcept;

		/**************************************************************************************************************
	     * Sets the frequency at which draw events are sent at.
         *
         * @exception std::bad_alloc If an internal allocation fails.
         * @exception SDLError If creating the draw ticker fails.
         *
         * @param frequency The frequency of draw events, or NO_DRAW_EVENTS to stop sending draw events.
	     **************************************************************************************************************/
		void                 sendDrawEvents(unsigned int frequency);

		/**************************************************************************************************************
	     * Sets whether text input events should be sent to the event queue.
         *
         * @param arg Whether text input events should be sent.
	     **************************************************************************************************************/
		void                 sendTextInputEvents(bool arg) noexcept;

		/**************************************************************************************************************
	     * Pushes an event to the queue.
         *
         * @exception SDLError If pushing the event failed.
         *
         * @param event The event to push.
	     **************************************************************************************************************/
		void                 pushEvent(const Event& event);

	private:
		/// @cond IMPLEMENTATION
		// Data used by a ticker.
		struct TickerData {
			EventQueue&   queue;
			std::int32_t  id;
			MillisecondsD preciseInterval;
			MillisecondsD
				accumulatedError;    // The accumulated error caused by imprecise SDL timers, used for correction.
			std::uint32_t ticksLeft; // The number of ticks left before automatically halting or TICK_FOREVER.
		};

		/// @endcond

		static std::uint32_t tickerCallback(std::uint32_t interval, void* ptr) noexcept;
		static std::uint32_t drawTickerCallback(std::uint32_t interval, void* ptr) noexcept;

		std::unordered_map<int, std::unique_ptr<TickerData>> _tickerData;
		int                                                  _drawTicker = 0; // The ID of the draw event ticker.
	};
} // namespace tr

/// @cond

template <std::constructible_from<tr::CustomEventBase> T>
tr::Event::operator T() const noexcept
{
	return T(getCustomEventBase());
}

/// @endcond
