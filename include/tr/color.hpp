#pragma once
#include "concepts.hpp"

namespace tr {
	/** @defgroup color Colors
	 *  Structures and functions for color manipulation.
	 *  @{
	 */

	/******************************************************************************************************************
	 * Concept denoting a valid color datatype.
	 *
	 * To fulfill this, a type must be an arithmetic type taking up up to 4 bytes.
	 ******************************************************************************************************************/
	template <class T>
	concept ColorDatatype = (std::integral<T> || FloatingPoint<T>) && sizeof(T) <= 4;

	/******************************************************************************************************************
	 * Single-channel red color.
	 *
	 * @tparam A valid color datatype.
	 ******************************************************************************************************************/
	template <ColorDatatype T> struct R {
		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		T r;

		constexpr friend bool operator==(const R&, const R&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Single-channel green color.
	 *
	 * @tparam A valid color datatype.
	 ******************************************************************************************************************/
	template <ColorDatatype T> struct G {
		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		T g;

		constexpr friend bool operator==(const G&, const G&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Single-channel blue color.
	 *
	 * @tparam A valid color datatype.
	 ******************************************************************************************************************/
	template <ColorDatatype T> struct B {
		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		T b;

		constexpr friend bool operator==(const B&, const B&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Two-channel RG color.
	 *
	 * @tparam A valid color datatype.
	 ******************************************************************************************************************/
	template <ColorDatatype T> struct RG {
		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		T r;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		T g;

		constexpr friend bool operator==(const RG&, const RG&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Three-channel RGB color.
	 *
	 * @tparam A valid color datatype.
	 ******************************************************************************************************************/
	template <ColorDatatype T> struct RGB {
		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		T r;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		T g;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		T b;

		constexpr friend bool operator==(const RGB&, const RGB&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Shorthand for the common 8-bit RGB color.
	 ******************************************************************************************************************/
	using RGB8 = RGB<std::uint8_t>;

	/******************************************************************************************************************
	 * Three-channel BGR color.
	 *
	 * @tparam A valid color datatype.
	 ******************************************************************************************************************/
	template <ColorDatatype T> struct BGR {
		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		T b;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		T g;

		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		T r;

		constexpr friend bool operator==(const BGR&, const BGR&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Four-channel RGBA color.
	 *
	 * @tparam A valid color datatype.
	 ******************************************************************************************************************/
	template <ColorDatatype T> struct RGBA {
		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		T r;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		T g;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		T b;

		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		T a;

		/**************************************************************************************************************
		 * Default-constructs an RGBA value.
		 **************************************************************************************************************/
		constexpr RGBA() noexcept = default;

		/**************************************************************************************************************
		 * Initializes an RGBA value.
		 *
		 * @param r, g, b, a Channel values.
		 **************************************************************************************************************/
		constexpr RGBA(T r, T g, T b, T a) noexcept;

		/**************************************************************************************************************
		 * Initializes an RGBA value from an RGB value and an alpha channel.
		 *
		 * @param rgb The RGB values.
		 * @param a The alpha channel value.
		 **************************************************************************************************************/
		constexpr RGBA(RGB<T> rgb, T a) noexcept;

		constexpr friend bool operator==(const RGBA&, const RGBA&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Shorthand for the common 8-bit RGBA color.
	 ******************************************************************************************************************/
	using RGBA8 = RGBA<std::uint8_t>;

	/******************************************************************************************************************
	 * Shorthand for the common floating-point RGBA color.
	 ******************************************************************************************************************/
	using RGBAF = RGBA<float>;

	/******************************************************************************************************************
	 * Four-channel BGRA color.
	 *
	 * @tparam A valid color datatype.
	 ******************************************************************************************************************/
	template <ColorDatatype T> struct BGRA {
		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		T b;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		T g;

		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		T r;

		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		T a;

		constexpr friend bool operator==(const BGRA&, const BGRA&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Three-channel HSV color.
	 ******************************************************************************************************************/
	struct HSV {
		/**************************************************************************************************************
		 * The hue channel.
		 **************************************************************************************************************/
		float h;

		/**************************************************************************************************************
		 * The saturation channel.
		 **************************************************************************************************************/
		float s;

		/**************************************************************************************************************
		 * The value channel.
		 **************************************************************************************************************/
		float v;

		constexpr friend bool operator==(const HSV&, const HSV&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed RGB color format.
	 ******************************************************************************************************************/
	struct RGB_Ui8_2_3_3 {
		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint8_t r : 2;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint8_t g : 3;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint8_t b : 3;

		constexpr friend bool operator==(const RGB_Ui8_2_3_3&, const RGB_Ui8_2_3_3&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed RGB color format.
	 ******************************************************************************************************************/
	struct RGB_Ui16_5_6_5 {
		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint16_t r : 5;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint16_t g : 6;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint16_t b : 5;

		constexpr friend bool operator==(const RGB_Ui16_5_6_5&, const RGB_Ui16_5_6_5&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed BGR color format.
	 ******************************************************************************************************************/
	struct BGR_Ui8_3_3_2 {
		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint8_t b : 3;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint8_t g : 3;

		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint8_t r : 2;

		constexpr friend bool operator==(const BGR_Ui8_3_3_2&, const BGR_Ui8_3_3_2&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed BGR color format.
	 ******************************************************************************************************************/
	struct BGR_Ui16_5_6_5 {
		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint16_t b : 5;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint16_t g : 6;

		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint16_t r : 5;

		constexpr friend bool operator==(const BGR_Ui16_5_6_5&, const BGR_Ui16_5_6_5&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed RGBA color format.
	 ******************************************************************************************************************/
	struct RGBA_Ui16_4_4_4_4 {
		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint16_t r : 4;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint16_t g : 4;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint16_t b : 4;

		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		std::uint16_t a : 4;

		constexpr friend bool operator==(const RGBA_Ui16_4_4_4_4&, const RGBA_Ui16_4_4_4_4&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed RGBA color format.
	 ******************************************************************************************************************/
	struct RGBA_Ui16_5_5_5_1 {
		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint16_t r : 5;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint16_t g : 5;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint16_t b : 5;

		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		std::uint16_t a : 1;

		constexpr friend bool operator==(const RGBA_Ui16_5_5_5_1&, const RGBA_Ui16_5_5_5_1&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed RGBA color format.
	 ******************************************************************************************************************/
	struct RGBA_Ui32_10_10_10_2 {
		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint32_t r : 10;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint32_t g : 10;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint32_t b : 10;

		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		std::uint32_t a : 2;

		constexpr friend bool operator==(const RGBA_Ui32_10_10_10_2&, const RGBA_Ui32_10_10_10_2&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed ABGR color format.
	 ******************************************************************************************************************/
	struct ABGR_Ui16_4_4_4_4 {
		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		std::uint16_t a : 4;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint16_t b : 4;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint16_t g : 4;

		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint16_t r : 4;

		constexpr friend bool operator==(const ABGR_Ui16_4_4_4_4&, const ABGR_Ui16_4_4_4_4&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed ABGR color format.
	 ******************************************************************************************************************/
	struct ABGR_Ui16_1_5_5_5 {
		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		std::uint16_t a : 1;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint16_t b : 5;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint16_t g : 5;

		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint16_t r : 5;

		constexpr friend bool operator==(const ABGR_Ui16_1_5_5_5&, const ABGR_Ui16_1_5_5_5&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed ABGR color format.
	 ******************************************************************************************************************/
	struct ABGR_Ui32_2_10_10_10 {
		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		std::uint32_t a : 2;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint32_t b : 10;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint32_t g : 10;

		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint32_t r : 10;

		constexpr friend bool operator==(const ABGR_Ui32_2_10_10_10&, const ABGR_Ui32_2_10_10_10&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed BGRA color format.
	 ******************************************************************************************************************/
	struct BGRA_Ui16_4_4_4_4 {
		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint16_t b : 4;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint16_t g : 4;
		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint16_t r : 4;

		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		std::uint16_t a : 4;

		constexpr friend bool operator==(const BGRA_Ui16_4_4_4_4&, const BGRA_Ui16_4_4_4_4&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed BGRA color format.
	 ******************************************************************************************************************/
	struct BGRA_Ui16_5_5_5_1 {
		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint16_t b : 5;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint16_t g : 5;

		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint16_t r : 5;

		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		std::uint16_t a : 1;

		constexpr friend bool operator==(const BGRA_Ui16_5_5_5_1&, const BGRA_Ui16_5_5_5_1&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed BGRA color format.
	 ******************************************************************************************************************/
	struct BGRA_Ui32_10_10_10_2 {
		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint32_t b : 10;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint32_t g : 10;

		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint32_t r : 10;

		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		std::uint32_t a : 2;

		constexpr friend bool operator==(const BGRA_Ui32_10_10_10_2&, const BGRA_Ui32_10_10_10_2&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed ARGB color format.
	 ******************************************************************************************************************/
	struct ARGB_Ui16_4_4_4_4 {
		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		std::uint16_t a : 4;

		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint16_t r : 4;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint16_t g : 4;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint16_t b : 4;

		constexpr friend bool operator==(const ARGB_Ui16_4_4_4_4&, const ARGB_Ui16_4_4_4_4&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed ARGB color format.
	 ******************************************************************************************************************/
	struct ARGB_Ui16_1_5_5_5 {
		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		std::uint16_t a : 1;

		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint16_t r : 5;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint16_t g : 5;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint16_t b : 5;

		constexpr friend bool operator==(const ARGB_Ui16_1_5_5_5&, const ARGB_Ui16_1_5_5_5&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Special packed ARGB color format.
	 ******************************************************************************************************************/
	struct ARGB_Ui32_2_10_10_10 {
		/**************************************************************************************************************
		 * The alpha channel.
		 **************************************************************************************************************/
		std::uint32_t a : 2;

		/**************************************************************************************************************
		 * The red channel.
		 **************************************************************************************************************/
		std::uint32_t r : 10;

		/**************************************************************************************************************
		 * The green channel.
		 **************************************************************************************************************/
		std::uint32_t g : 10;

		/**************************************************************************************************************
		 * The blue channel.
		 **************************************************************************************************************/
		std::uint32_t b : 10;

		constexpr friend bool operator==(const ARGB_Ui32_2_10_10_10&, const ARGB_Ui32_2_10_10_10&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Concept denoting a built-in color type (as opposed to custom castable color types).
	 ******************************************************************************************************************/
	template <class T>
	concept BuiltinColor =
		SpecializationOf<T, R> || SpecializationOf<T, G> || SpecializationOf<T, B> || SpecializationOf<T, RG> ||
		SpecializationOf<T, RGB> || SpecializationOf<T, BGR> || SpecializationOf<T, RGBA> ||
		SpecializationOf<T, BGRA> || std::same_as<T, RGB_Ui8_2_3_3> || std::same_as<T, RGB_Ui16_5_6_5> ||
		std::same_as<T, BGR_Ui8_3_3_2> || std::same_as<T, BGR_Ui16_5_6_5> || std::same_as<T, RGBA_Ui16_4_4_4_4> ||
		std::same_as<T, RGBA_Ui16_5_5_5_1> || std::same_as<T, RGBA_Ui32_10_10_10_2> ||
		std::same_as<T, ABGR_Ui16_4_4_4_4> || std::same_as<T, ABGR_Ui16_1_5_5_5> ||
		std::same_as<T, ABGR_Ui32_2_10_10_10> || std::same_as<T, BGRA_Ui16_4_4_4_4> ||
		std::same_as<T, BGRA_Ui16_5_5_5_1> || std::same_as<T, BGRA_Ui32_10_10_10_2> ||
		std::same_as<T, ARGB_Ui16_4_4_4_4> || std::same_as<T, ARGB_Ui16_1_5_5_5> ||
		std::same_as<T, ARGB_Ui32_2_10_10_10>;

	/// @}
} // namespace tr

/// @cond IMPLEMENTATION

template <tr::ColorDatatype T>
constexpr tr::RGBA<T>::RGBA(T r, T g, T b, T a) noexcept
	: r{r}, g{g}, b{b}, a{a}
{
}

template <tr::ColorDatatype T>
constexpr tr::RGBA<T>::RGBA(RGB<T> rgb, T a) noexcept
	: r{rgb.r}, g{rgb.g}, b{rgb.b}, a{a}
{
}

/// @endcond
